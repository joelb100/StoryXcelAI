1) Replace your StoryBuilder.tsx with this

import { useMemo } from "react";
import RichEditor from "@/components/editor/RichEditor";

interface StoryBuilderProps {
  projectName?: string;
  projectType?: string;
  lengthPages?: number;
  lengthMinutes?: number;
  genre?: string;
  genreDef?: string;
  subGenre?: string;
  subGenreDef?: string;
  theme?: string;
  themeDef?: string;
  subTheme?: string;
  subThemeDef?: string;
  centralConflict?: string;
  centralConflictDef?: string;
  storyHtml: string;
  setStoryHtml: (html: string) => void;
}

export default function StoryBuilder(props: StoryBuilderProps) {
  const {
    projectName = "",
    projectType = "Screenplay",
    lengthPages,
    lengthMinutes,
    genre = "",
    genreDef = "",
    subGenre = "",
    subGenreDef = "",
    theme = "",
    themeDef = "",
    subTheme = "",
    subThemeDef = "",
    centralConflict = "",
    centralConflictDef = "",
    storyHtml,
    setStoryHtml,
  } = props;

  const projectTypeDisplay = useMemo(() => {
    const bits = [projectType];
    if (typeof lengthPages === "number") bits.push(`${lengthPages} pages`);
    if (typeof lengthMinutes === "number") bits.push(`${lengthMinutes} mins`);
    return bits.join(" / ");
  }, [projectType, lengthPages, lengthMinutes]);

  return (
    /**
     * IMPORTANT: min-h-0 on every flex ancestor prevents the “push down on Enter”
     * behavior and keeps scroll inside the intended pane only.
     */
    <div className="w-full h-[calc(100vh-120px)] flex flex-col min-h-0">
      {/* OVERVIEW (locked area with its own scrollbar) */}
      <section className="shrink-0 border-b border-slate-200 bg-white">
        <div className="p-3">
          <h3 className="text-sm font-semibold text-slate-800 mb-2">Story Overview</h3>

          {/* This is the only scrollable thing in the overview area */}
          <div className="max-h-48 overflow-y-auto rounded-md border border-slate-200 p-3 text-[13px] leading-relaxed">
            {projectName && (
              <div className="mb-1">
                <span className="font-semibold">Story Title</span> — {projectName}
              </div>
            )}

            <div className="mb-1">
              <span className="font-semibold">Project Type</span> — {projectTypeDisplay}
            </div>

            {genre && (
              <div className="mb-1">
                <span className="font-semibold">Genre</span> — {genre}
                {genreDef && (
                  <div className="ml-3 text-slate-600">{genreDef}</div>
                )}
              </div>
            )}

            {subGenre && (
              <div className="mb-1">
                <span className="font-semibold">Sub Genre</span> — {subGenre}
                {subGenreDef && (
                  <div className="ml-3 text-slate-600">{subGenreDef}</div>
                )}
              </div>
            )}

            {theme && (
              <div className="mb-1">
                <span className="font-semibold">Theme</span> — {theme}
                {themeDef && (
                  <div className="ml-3 text-slate-600">{themeDef}</div>
                )}
              </div>
            )}

            {subTheme && (
              <div className="mb-1">
                <span className="font-semibold">Sub Theme</span> — {subTheme}
                {subThemeDef && (
                  <div className="ml-3 text-slate-600">{subThemeDef}</div>
                )}
              </div>
            )}

            {centralConflict && (
              <div>
                <span className="font-semibold">Central Conflict</span> — {centralConflict}
                {centralConflictDef && (
                  <div className="ml-3 text-slate-600">{centralConflictDef}</div>
                )}
              </div>
            )}
          </div>
        </div>
      </section>

      {/* EDITOR (fills the space, only this scrolls while typing) */}
      <section className="flex-1 min-h-0 flex flex-col">
        <div className="px-3 pt-3 pb-2 flex items-center justify-between">
          <h3 className="text-lg font-semibold text-slate-800">Story Beats</h3>
        </div>

        {/* The editor’s parent MUST have min-h-0 and overflow-hidden;
            the editor itself gets h-full so Quill consumes all space. */}
        <div className="flex-1 min-h-0 overflow-hidden px-3 pb-3">
          <div className="h-full rounded-md border border-slate-200">
            <RichEditor value={storyHtml} onChange={setStoryHtml} className="h-full" />
          </div>
        </div>
      </section>

      {/* AI ASSISTANT (fixed height, never moves) */}
      <section className="shrink-0 h-56 border-t border-slate-200 bg-[#e9eff5]">
        {/* Keep your existing AI assistant component/markup here.
           If it already lives elsewhere (e.g., separate component),
           just ensure this wrapper keeps a fixed height (h-56). */}
      </section>
    </div>
  );
}

2) Make sure your RichEditor actually fills its parent

Your current wrapper creates a div without a guaranteed height for Quill. Give it the full height and let the Quill container fill it.

// client/src/components/editor/RichEditor.tsx
import { useEffect, useRef } from "react";
import Quill from "quill";
import "quill/dist/quill.snow.css";

type Props = {
  value: string;
  onChange: (html: string) => void;
  className?: string;
};

export default function RichEditor({ value, onChange, className }: Props) {
  const hostRef = useRef<HTMLDivElement | null>(null);
  const qRef = useRef<Quill | null>(null);

  useEffect(() => {
    if (!hostRef.current || qRef.current) return;

    const q = new Quill(hostRef.current, {
      theme: "snow",
      modules: { toolbar: true, clipboard: { matchVisual: true } },
    });
    qRef.current = q;

    // resize the Quill container to fill the host
    const container = hostRef.current.querySelector(".ql-container") as HTMLElement | null;
    if (container) container.style.height = "calc(100% - 42px)"; // toolbar ≈42px
    const root = hostRef.current.querySelector(".ql-editor") as HTMLElement | null;
    if (root) root.style.minHeight = "auto";

    q.on("text-change", () => onChange(q.root.innerHTML));
  }, [onChange]);

  // keep Quill in sync when value is changed externally
  useEffect(() => {
    const q = qRef.current;
    if (!q) return;
    const current = q.root.innerHTML;
    if (current !== value) {
      const delta = q.clipboard.convert(value || "<p><br/></p>");
      q.setContents(delta, "silent");
    }
  }, [value]);

  return (
    <div className={["w-full h-full", className].filter(Boolean).join(" ")}>
      <div ref={hostRef} className="w-full h-full" />
    </div>
  );
}

3) (Optional) One CSS safety net

If you prefer CSS instead of inline sizing for Quill:

/* e.g., in index.css or global.css */
.ql-container {
  height: calc(100% - 42px) !important; /* subtract toolbar height */
}

