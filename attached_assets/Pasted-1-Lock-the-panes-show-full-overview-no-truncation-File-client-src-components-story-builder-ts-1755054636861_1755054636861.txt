1) Lock the panes + show full overview (no truncation)

File: client/src/components/story-builder.tsx
Replace your component with this version (it uses a simple two‑row grid: row 1 = Overview auto height, row 2 = editor fills the rest; the assistant is not inside this component so it stays fixed below).

import { useEffect } from "react";
import RichEditor from "@/components/editor/RichEditor";

interface StoryBuilderProps {
  projectName?: string;
  projectType?: string;
  lengthPages?: number;
  lengthMinutes?: number;
  genre?: string;
  genreDef?: string;
  subGenre?: string;
  subGenreDef?: string;
  theme?: string;
  themeDef?: string;
  subTheme?: string;
  subThemeDef?: string;
  centralConflict?: string;
  centralConflictDef?: string;
  storyHtml: string;
  setStoryHtml: (html: string) => void;
}

export default function StoryBuilder({
  projectName = "",
  projectType = "",
  lengthPages,
  lengthMinutes,
  genre = "",
  genreDef = "",
  subGenre = "",
  subGenreDef = "",
  theme = "",
  themeDef = "",
  subTheme = "",
  subThemeDef = "",
  centralConflict = "",
  centralConflictDef = "",
  storyHtml,
  setStoryHtml,
}: StoryBuilderProps) {
  const projectTypeDisplay = (() => {
    if (!projectType) return "Screenplay / 90 pages / 90 mins";
    const parts = [projectType];
    if (typeof lengthPages === "number") parts.push(`${lengthPages} pages`);
    if (typeof lengthMinutes === "number") parts.push(`${lengthMinutes} mins`);
    return parts.join(" / ");
  })();

  // Ensure the editor never pushes layout: the outer wrapper is a fixed-height grid
  return (
    <div
      className="
        grid grid-rows-[auto_1fr]
        h-[calc(100vh-220px)]    /* fits your top nav + margins; adjust 220 if needed */
        w-full
        overflow-hidden
      "
    >
      {/* Story Overview — auto height; no truncation; full text visible */}
      <div className="px-4 pt-3 pb-2 border-b border-slate-200 overflow-visible">
        <div className="space-y-2 text-[13px] leading-snug text-slate-800">
          {projectName && (
            <div>
              <span className="font-semibold">Story Title</span> — {projectName}
            </div>
          )}

          <div>
            <span className="font-semibold">Project Type</span> — {projectTypeDisplay}
          </div>

          {genre && (
            <div>
              <span className="font-semibold">Genre</span> — {genre}
              {genreDef && (
                <div className="ml-4 text-slate-600 whitespace-normal">
                  {genreDef}
                </div>
              )}
            </div>
          )}

          {subGenre && (
            <div>
              <span className="font-semibold">Sub Genre</span> — {subGenre}
              {subGenreDef && (
                <div className="ml-4 text-slate-600 whitespace-normal">
                  {subGenreDef}
                </div>
              )}
            </div>
          )}

          {theme && (
            <div>
              <span className="font-semibold">Theme</span> — {theme}
              {themeDef && (
                <div className="ml-4 text-slate-600 whitespace-normal">
                  {themeDef}
                </div>
              )}
            </div>
          )}

          {subTheme && (
            <div>
              <span className="font-semibold">Sub Theme</span> — {subTheme}
              {subThemeDef && (
                <div className="ml-4 text-slate-600 whitespace-normal">
                  {subThemeDef}
                </div>
              )}
            </div>
          )}

          {centralConflict && (
            <div>
              <span className="font-semibold">Central Conflict</span> — {centralConflict}
              {centralConflictDef && (
                <div className="ml-4 text-slate-600 whitespace-normal">
                  {centralConflictDef}
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Story Beats editor — fixed row that scrolls internally */}
      <div className="min-h-0 overflow-hidden flex flex-col">
        <div className="px-4 py-2 text-lg font-semibold text-slate-800 flex-shrink-0">
          Story Beats
        </div>

        <div className="flex-1 min-h-0 overflow-auto px-4 pb-3">
          <RichEditor value={storyHtml} onChange={setStoryHtml} className="h-full" />
        </div>
      </div>
    </div>
  );
}

    What changed:

        No truncate anywhere: every overview line is fully visible.

        The red editor area is the second grid row and always the same height; the content scrolls inside it.

        Hitting Enter won’t stretch the page anymore.

        The AI Assistant lives outside this component (as you already have it), so it stays pinned and doesn’t shift.

    If the editor is still a bit tall/short on your screen, tweak only the h-[calc(100vh-220px)] value (it just compensates for your top nav + paddings).

2) Restore Central‑Conflict → Story‑Beats auto‑fill (no repeats)

Create a tiny helper with ready‑to‑use beats.
File: client/src/lib/centralConflictBeats.ts

export type Beats = {
  plotA: string[];
  subplotB: string[];
  subplotC: string[];
  twists: string[];
  hook: string[];
};

export const CENTRAL_CONFLICT_BEATS: Record<string, Beats> = {
  "[Wo]Man vs. [Wo]Man": {
    plotA: [
      "Rival’s move forces a risky escalation.",
      "A public confrontation shifts power dynamics.",
      "Ultimatum sets a ticking clock."
    ],
    subplotB: [
      "Allies question loyalty under pressure.",
      "Romance complicates tactics and timing."
    ],
    subplotC: [
      "Rumors & reputation alter who’s trusted.",
      "Local customs create unexpected constraints."
    ],
    twists: [
      "Antagonist wants the same ‘good’ outcome.",
      "A betrayal was a protective lie."
    ],
    hook: [
      "Two equals collide; victory costs identity."
    ]
  },

  "[Wo]Man vs. Nature": {
    plotA: [
      "Weather swings force a route change.",
      "Critical supplies are lost or spoiled.",
      "Shelter becomes a trap."
    ],
    subplotB: [
      "Relationships fray under survival stress.",
      "Compassion vs. triage: who gets saved?"
    ],
    subplotC: [
      "Local terrain myths affect choices.",
      "Rescue plans clash with reality."
    ],
    twists: [
      "The safe path hides a greater threat."
    ],
    hook: [
      "Endure the world; the world doesn’t care."
    ]
  },

  "[Wo]Man vs. the Environment": {
    plotA: [
      "Systems pressure force adaptation or extinction.",
      "A breaking point demands radical action despite consequences.",
      "The environment’s ‘rules’ shift mid‑story, invalidating old strategies."
    ],
    subplotB: [
      "Personal relationships strain under environmental stress.",
      "Old loyalties conflict with survival needs."
    ],
    subplotC: [
      "Infrastructure failures cascade into larger crises.",
      "Resource scarcity creates new hierarchies of power."
    ],
    twists: [
      "The environment was shaped by past human choices.",
      "Adaptation changes the protagonist in unexpected ways."
    ],
    hook: [
      "What you built to protect you becomes your prison."
    ]
  },

  "[Wo]Man vs. Machines / Technology": {
    plotA: [
      "Tool becomes gatekeeper; access revoked.",
      "Automation makes a catastrophic choice.",
      "System exploits user’s blind spot."
    ],
    subplotB: [
      "Convenience erodes consent.",
      "Old skills suddenly matter again."
    ],
    subplotC: [
      "Legacy tech reveals a manual override.",
      "A patch creates a wider vulnerability."
    ],
    twists: [
      "The ‘bug’ was a feature all along."
    ],
    hook: [
      "We taught the machine too well."
    ]
  },

  "[Wo]Man vs. the Supernatural": {
    plotA: [
      "Signs intensify; rules of the haunting surface.",
      "A protection ritual backfires.",
      "Sacrifice is demanded—by name."
    ],
    subplotB: [
      "Skeptic vs. believer fractures the group.",
      "Past guilt resurfaces as a curse condition."
    ],
    subplotC: [
      "Local lore provides a missing step.",
      "A possessed object changes hands."
    ],
    twists: [
      "The entity wants ‘justice’, not chaos."
    ],
    hook: [
      "What haunts you has a reason—and it’s right."
    ]
  },

  "[Wo]Man vs. Self": {
    plotA: [
      "Old coping strategy fails at the worst time.",
      "An avoided truth becomes public.",
      "Relapse (or regression) triggers collateral damage."
    ],
    subplotB: [
      "A mentor’s tough love forces a choice.",
      "Romance exposes self‑deception."
    ],
    subplotC: [
      "A childhood place resurfaces a buried memory.",
      "Symbolic object must be destroyed or reclaimed."
    ],
    twists: [
      "The ‘flaw’ is tied to the protagonist’s gift."
    ],
    hook: [
      "To win, you must stop being you."
    ]
  },

  "[Wo]Man vs. God / Religion": {
    plotA: [
      "Doctrine and necessity collide.",
      "A public rite is interrupted.",
      "Blasphemy or miracle? Records disagree."
    ],
    subplotB: [
      "Community splits along belief lines.",
      "Forbidden kindness shifts a zealot."
    ],
    subplotC: [
      "A relic changes meaning in the present.",
      "Heretical text reframes a prophecy."
    ],
    twists: [
      "Faith keeps a secret from the faithful."
    ],
    hook: [
      "Reverence vs. responsibility—choose one."
    ]
  },

  "[Wo]Man vs. Society": {
    plotA: [
      "Lawful path forecloses a moral good.",
      "Public opinion turns on partial truth.",
      "A protest/strike creates personal stakes."
    ],
    subplotB: [
      "Family reputation is weaponized.",
      "A friend becomes a surveillance risk."
    ],
    subplotC: [
      "Policy detail hides an escape clause.",
      "Black‑market help has a price."
    ],
    twists: [
      "The institution was built to prevent this moment."
    ],
    hook: [
      "Break the rules or break yourself."
    ]
  }
};

File: wherever your central‑conflict state lives (from your tree, it’s usually client/src/pages/builder.tsx or client/src/pages/dashboard-layout.tsx), wire auto‑fill like this:

import { useCallback, useRef } from "react";
import { CENTRAL_CONFLICT_BEATS } from "@/lib/centralConflictBeats";
// ...your other imports

// state you already have:
const [centralConflict, setCentralConflict] = useState<string>("");
const [storyHtml, setStoryHtml] = useState<string>("");

// --- helpers to render beats as HTML and replace (no duplicates)
const BEATS_START = "<!-- STORYXCEL_BEATS_START -->";
const BEATS_END = "<!-- STORYXCEL_BEATS_END -->";

const renderBeatsHtml = (conflictLabel: string) => {
  const beats = CENTRAL_CONFLICT_BEATS[conflictLabel];
  if (!beats) return "";

  const list = (title: string, items: string[]) =>
    `<p><strong>${title}</strong></p><ul>${items.map(i => `<li>${i}</li>`).join("")}</ul>`;

  return [
    BEATS_START,
    `<h3>Story Beats</h3>`,
    list("Plot A — The high level description of the story’s key sequential events of the main story", beats.plotA),
    list("Sub Plot B — The storyline’s Secondary sequential story points that focus on relationships", beats.subplotB),
    list("Sub Plot C — The storyline’s Tertiary sequential story points that focus on background elements", beats.subplotC),
    list("Plot Twists —", beats.twists),
    list("Emotional Hook — A powerful narrative element designed to evoke strong feelings", beats.hook),
    BEATS_END,
  ].join("");
};

const upsertBeats = useCallback((conflictLabel: string) => {
  const html = renderBeatsHtml(conflictLabel);
  if (!html) return;

  setStoryHtml(prev => {
    const start = prev.indexOf(BEATS_START);
    const end = prev.indexOf(BEATS_END);
    if (start !== -1 && end !== -1) {
      // replace existing block (prevents repeats)
      return prev.slice(0, start) + html + prev.slice(end + BEATS_END.length);
    }
    // otherwise append to the end of the document
    return prev + (prev.trim() ? "<hr/>" : "") + html;
  });
}, []);

Then, where you handle the Central Conflict select (in your left sidebar component), call both setters:

// inside onValueChange/onChange of the Central Conflict Control
onValueChange={(val) => {
  setCentralConflict(val);
  upsertBeats(val);
}}

    This replaces any prior “Story Beats” block inside the editor (bounded by the HTML comments) so you never get duplicates. Users can freely edit the beats in‑place afterwards.

3) Keep the AI Assistant frozen

You already have it in its own panel. Make sure that container has a fixed height and doesn’t grow:

// wrapper around the assistant panel (where you render the chat)
<div className="h-[220px] min-h-[220px] max-h-[220px] border-t border-slate-200 overflow-auto">
  {/* assistant UI ... */}
</div>

That keeps the green area in your screenshot pinned and prevents page reflow, while its content can scroll.
Will this break auto‑fill elsewhere?

No. This patch does not touch your overview auto‑fill wiring. The overview still renders from the same props; we only removed any truncate classes and made the layout non-stretchy. The central‑conflict auto‑fill uses its own bounded HTML block so users don’t see repeats and you can safely reselect another conflict to refresh the beats.